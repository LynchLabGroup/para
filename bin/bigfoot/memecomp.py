#!/usr/bin/env python
# -*- coding: utf-8 -*-

### IMPORTS ###
import itertools as it
import time
from Bio import motifs
from Bio.Alphabet import Gapped
from Bio.Alphabet.IUPAC import ExtendedIUPACDNA
### CLASSES ###
class MotifFile(object):
	"""
	Parsed motif file generated by custom script.
	"""

	def __init__(self,filename):

		with open(filename,"r") as f:
			i = 0
			records = []
			for key, group in it.groupby(f, lambda line: line.startswith("\n")):
				if not key:
					block = list(group)
					if i == 0:
						s = block[0] # line string
						s = s.rstrip("\n").lstrip("Launched:")
						s = s.split(" ")
						date = " ".join(s[0:5])
						pred_thre = float(s[-5])
						ali_thre = float(s[-3])
						size_thre = float(s[-1])
					elif i % 2 == 1:
						mot = []
						mot.append(block)
					elif i % 2 == 0:
						mot.append(block)
						m = read_motif_seq(mot)
						records.append(m)

					i += 1

		self._filename = filename
		self._date = time.strptime(date, "%a, %d %b %Y %H:%M:%S")
		self._pred_thre = pred_thre
		self._ali_thre = ali_thre
		self._size_thre = size_thre
		self._motifs = records

	def __str__(self):
		"""Method called when 'print object' is used. """

		s = "File: {} Date: {}\nThresholds: {} (Pred) {} (Align) {} (Size)".format(self.filename(), self.date(), self.pred(), self.ali(), self.size())
		return s
	
	def pred(self):
		return self._pred_thre
	
	def ali(self):
		return self._ali_thre
	
	def size(self):
		return self._size_thre
	
	def date(self):
		return time.strftime("%a, %d %b %Y %H:%M:%S", self._date)
	
	def filename(self):
		return self._filename

class WeightedMotif(motifs.meme.Motif):
	"""
	Custom Motif class
	"""
	def __init__(self, alphabet, instances, phylo_score, align_score):
		Motif.__init__(self, alphabet, instances)
		self.pred = phylo_score
		self.ali = align_score

def read_motif_seq(block):
	"""
	From the block of lines used in MotifFile, return a Motif object
	"""
	gapped = Gapped(ExtendedIUPACDNA(), '-')
	instances = []
	head = block[0][0]
	head = head.rstrip("\n").split(" ")
	motif_name = head[0]
	motif_length = head[-1]

	for l in block[1]:
		l = l.rstrip("\n").split("\t")
		instance = motifs.meme.Instance(l[-1], gapped)
		
		instance.motif_name = motif_name
		instance.sequence_name = l[0].translate(None, " ")
		instance.start = int(l[1].translate(None," "))
		instance.length = motif_length

		instances.append(instance)

	inst = motifs.Instances(instances, gapped)

	motif = WeightedMotif(gapped, inst, float(head[-5]), float(head[-3]))
	motif.length = motif_length
	motif.name = motif_name

	return motif

