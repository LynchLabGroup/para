#!/bin/bash
#PBS -k o
#PBS -l nodes=1:ppn=8,vmem=16gb,walltime=02:00:00:00
#PBS -M mgrenie@indiana.edu
#PBS -m be
#PBS -N MotifsExtraction
#PBS -j oe
echo "Job Started at: "; date
module load java/1.7.0_25
cd para/

LOCATION="data/families/WGD2/upstream/"

CDSLOC="data/families/WGD2/CDS/nt/"

# Fetch upstream sequences
echo "Extracting upstream sequences..."
python bin/gff/main.py -l 250 -ml 15 -f 4 -mf 4 -loc $LOCATION --head
echo "Done."

# Fetch all CDSs
echo "Fetching CDSs..."
python bin/ntseq.py
echo "Done."

for FAM in `ls $LOCATION/WGD* | xargs -n1 basename | cut -d. -f 1`;
do

CDS="CDS"
FAMCDS=$FAM$CDS
TARGET="results/$FAM/"
mkdir results/$FAM

# Edit header to shorten name
echo "Transforming upstream Fasta header"
python bin/scripts/fastaheader.py data/families/WGD2/upstream/$FAM.fasta "|" $TARGET$FAM.fasta

# Run the whole process only if has not find the tree files
if [ ! -f $TARGET$FAM.newick ]
then 

	# Align CDS from sequences
	echo "Aligning CDS sequence..."
	perl bin/scripts/translatorx_vLocal.pl -c 6 -i $CDSLOC$FAM.fasta -o $TARGET$FAMCDS
	echo "Done."

	# Edit CDS header name
	echo "Transforming CDS Fasta header"
	python bin/scripts/fastaheader.py $TARGET$FAMCDS.nt_ali.fasta "|" $TARGET$FAMCDS.fasta

	# Extract only matching CDSs and upstream sequences
	echo "Matching CDSs with upstream seqs."
	python bin/scripts/extractmatch.py $TARGET$FAM.fasta $TARGET$FAMCDS.fasta $TARGET$FAMCDS.e.fasta

	# Convert CDS to phylip format
	echo "Converting Fasta to phylip"
	perl bin/scripts/ConvertFastatoPhylip.pl $TARGET$FAMCDS.e.fasta $TARGET$FAMCDS.phyl
	echo "Done."

	# Generate sequence tree
	echo "Generating tree..."
	phyml -i $TARGET$FAMCDS.phyl
	echo "Done."

	# Need a step to edit tree
	echo "Editing tree..."
	python bin/scripts/editnewick.py $TARGET$FAMCDS.phyl_phyml_tree.txt $TARGET$FAM.newick
	echo "Done."
fi

echo "Tidying up TranslatorX files..."
bin/scripts/tidyup.sh $TARGET
echo "Done."
# Check if mpd files exist
RUN=0
if [ -f $TARGET$FAM.fasta.mpd ]
then
	LINES=`wc -l $TARGET$FAM.fasta.mpd`
	if [ $LINES -eq 0 ]
	then
		RUN=1
	fi
fi
if [ ! -f $TARGET$FAM.fasta.mpd ]
then
	RUN=1
fi

# Run Bigfoot only if file does not exist or have no lines
if [ $RUN -eq 1 ]
then
	# Detect motifs
	echo "Detecting motifs"
	java -jar ../BigFoot/BigFoot.jar -t $TARGET$FAM.newick -p=1000,20000,1000 $TARGET$FAM.fasta
	echo "Done."
fi

# Parsing BigFoot ouput
echo "Parsing BigFoot's ouput"
python bin/bigfoot/setup.py -o $TARGET$FAM.motifs $TARGET$FAM.fasta.mpd $TARGET$FAM.fasta.pred -s 4 -t 0.9 -a 0.8
echo "Done."

# Running meme
echo "Running MEME"
meme -minw 4 -nmotifs 5 -dna -text $TARGET$FAM.fasta >> $TARGET$FAM.meme.motifs
echo "Done."

if [ -f $TARGET$FAM.motifs ] && [ -f $TARGET$FAM.meme.motifs]
then
	python bin/bigfoot/memecomp.py $TARGET$FAM.motifs $TARGET$FAM.meme.motifs -t 0.9 -o $TARGET$FAM.comp
fi
done

echo "Job Finished at:"; date
