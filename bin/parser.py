#!/usr/bin/env python
# -*- coding: utf-8 -*-
from weight import WeightSeq

class SeqParser(object):
	"""
	Object that takes in parameter BigFoot's alignement file and phylogenetic prediction file. It can parse file to extract motifs.
	"""

	def __init__(self,seqfile,predfile):
		"""
		seqfile - BigFoot's StatAlign ouput file
		predfile - BigFoot's '.pred' file of phylogenetic prediction
		"""

		self._seqfile = seqfile
		self._predfile = predfile
		self._parse = None #to stock the parsed sequences

	def __str__(self):

		s = "Sequence File: {}\nPrediction File: {}".format(self._seqfile,self._predfile)

		return s

	def __repr__(self):
		return self.__str__()

	def parse(self):
		"""
		Returns a list of WeightSeq extracted from the sequence file
		"""

		if self._parse == None:

			seqs = [] #list of Weighted Sequences generated by parsing file

			with open(self._seqfile,"r") as f:
				for i,l in enumerate(f.readlines()):
					try:
						float(l) #try if line is numbers only
					except ValueError:
						seqs.append(WeightSeq(l))

			self._parse = seqs

			return seqs
		else:
			return "Sequence file was already parsed"

	def motifs(self,thre):
		"""
		Returns a dictionary of sequences motifs
		"""

		if self._parse == None:
			print "No previous parsing"
			print "Parsing file..."
			seqs = self.parse()
			print "Done"
		else:
			seqs = self._parse

		seqs[0].weight(self._predfile) #weight first sequence

		known = seqs[0].motifs(thre) #extract motifs with given threshold from first sequence

		mot = {} #motifs dictionary

		for i,k in enumerate(known):

			name = "motif"+str(i+1)

			mot[name] = {}

			mot[name]["start"] = k[1] #start position of motif
			mot[name]["stop"] = k[2] #end position of motif
			mot[name]["score"] = k[3] # average score

			for s in seqs:
				mot[name][s.name()] = s[k[1]:k[2]] #extract motif from each sequence

		return mot


