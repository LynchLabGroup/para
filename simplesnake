# -*- coding: utf-8 -*-
# experimental Snakefile
FAM = ["WGD2ANC00002", "WGD2ANC00004", "WGD2ANC00005"]
UPSTREAM = "data/families/WGD2/upstream/"
CDSLOC = "data/families/WGD2/CDS/nt/"
RESULTS = "results/"
MINLEN = 15
MAXLEN = 250
MINFAMMEMBER = 4
LOWFAMMEMBER = 4
EVAL = 0.001
PREDTHRE = 0.9
ALITHRE = 0.8
MINWIDTH = 4
NMOTIFS = 5
BFPARAM = "1000,2000,1000"
OVERLAP = 0.9

def dir_list_from_name(prefix, names):
    real_name = []
    for name in names:
        real = name.split("/")[-1].rstrip(".fasta")
        real_name.append(prefix+real)
    return real_name

# ## Rules for Retrieving Sequences

#rule retrieve_CDS:
#   """Retrieve CDSs according to families"""
#   output: dynamic(CDSLOC+"{family}.fasta")
#   threads: 1
#   shell: 
#       """
#       python2 bin/ntseq.py -f {MINFAMMEMBER} --header -loc {CDSLOC}/
#       """
#
#rule retrieve_up:
#   """Retrieve upstream sequences."""
#   output: dynamic(UPSTREAM+"{family}.fasta")
#   threads: 1
#   shell: """
#       python2 bin/gff/main.py -l {MAXLEN} -ml {MINLEN} -f {LOWFAMMEMBER} -mf {MINFAMMEMBER} -loc {UPSTREAM}/ --head
#       """
# ## Making dir
rule make_dir:
    """Make given dir"""
    input: dynamic(UPSTREAM+"{family}.fasta")
    output: temp(RESULTS+"dirtmp")
    run:
        dir_list = dir_list_from_name(RESULTS, input)
        print(dir_list)
        shell(
        """
        mkdir -p {dir_list}
        touch {output}
        """)

### Operations on upstream seqs
rule edit_upstream:
    """Edit upstream sequences and move them into results folder."""
    input: UPSTREAM+"{family}.fasta"
    output: RESULTS+"{family}/{family}.fasta"
    shell: """
    python2 bin/scripts/fastaheader.py {input[0]} '|' {output}
    """

### Operations on CDSs
rule align_CDS:
    """Aligning CDSs"""
    input: CDSLOC+"{family}.fasta"
    params: prefix=RESULTS+"{family}/{family}.CDS"
    output: RESULTS+"{family}/{family}.CDS.nt_ali.fasta"
    shell: "perl bin/scripts/translatorx_vLocal.pl -c 6 -i {input} -o {params.prefix}"

rule edit_CDS:
    """Editing CDSs headers"""
    input: RESULTS+"{family}/{family}.CDS.nt_ali.fasta"
    output: RESULTS+"{family}/{family}.CDS.fasta"
    shell: "python2 bin/scripts/fastaheader.py {input} '|' {output}"

rule matching_CDS:
    """Extract only matching CDS that are in upstream file."""
    input: RESULTS+"{family}/{family}.fasta", RESULTS+"{family}/{family}.CDS.fasta"
    output: RESULTS+"{family}/{family}.CDS.e.fasta"
    shell: "python2 bin/scripts/extractmatch.py {input} {output}"

rule convert_to_phylip:
    """Convert CDSs to Phylip format"""
    input: RESULTS+"{family}/{family}.CDS.e.fasta"
    output: RESULTS+"{family}/{family}.CDS.phyl"
    shell: "perl bin/scripts/ConvertFastatoPhylip.pl {input} {output}"

rule compute_ml_tree:
    """Compute ML gene tree on CDSs"""
    input: RESULTS+"{family}/{family}.CDS.phyl"
    output: RESULTS+"{family}/{family}.CDS.phyl_phyml_tree.txt"
    shell: "phyml -i {input}"

rule adapt_tree:
    """Edit ML tree to be compatible with BigFoot."""
    input: RESULTS+"{family}/{family}.CDS.phyl_phyml_tree.txt"
    output: RESULTS+"{family}/{family}.newick"
    shell: "python2 bin/scripts/editnewick.py {input} {output}"

# ## Motif Finding

rule run_bigfoot:
    """Compute scores with BigFoot"""
    input: RESULTS+"{family}/{family}.fasta", RESULTS+"{family}/{family}.newick"
    output: RESULTS+"{family}/{family}.fasta.mpd", RESULTS+"{family}/{family}.fasta.pred"
    shell: "java -jar ../BigFoot/BigFoot.jar -t {input[1]} -p={BFPARAM} {input[0]}"

rule parse_bigfoot_motifs:
    """From BigFoot scores indentify motifs."""
    input: RESULTS+"{family}/{family}.fasta.mpd", RESULTS+"{family}/{family}.fasta.pred"
    output: RESULTS+"{family}/{family}.motifs"
    shell: "python2 bin/bigfoot/setup.py {input} -o {output} -t {PREDTHRE} -a {ALITHRE}"

# ## Operations on files
rule make_tmp:
    input: RESULTS+"{family}/{family}.motifs"
    output: RESULTS+"{family}/{family}.tmp"
    shell: "touch {output}"

### General Rules ###
rule all:
    input: expand(RESULTS+"{family}/{family}.tmp",family=FAM)
